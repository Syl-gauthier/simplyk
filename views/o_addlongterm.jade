extends ./g_layout.jade
block vars
  - var page = 'addlongterm'

block head
  script(src='/bower_components/pickadate/lib/picker.js', type='text/javascript')
  script(src='/bower_components/pickadate/lib/picker.date.js', type='text/javascript')
  script(src='/bower_components/pickadate/lib/picker.time.js', type='text/javascript')
  script(src='/bower_components/pickadate/lib/legacy.js', type='text/javascript')
  link(href='/bower_components/pickadate/lib/themes/classic.css', rel='stylesheet')
  link(href='/bower_components/pickadate/lib/themes/classic.date.css', rel='stylesheet')
  link(href='/bower_components/pickadate/lib/themes/classic.time.css', rel='stylesheet')
  title Trouve des bénévoles à long terme
  meta(name='description', content='Ajoute une opportunité de bénévolat à long terme')
block content
  .container-fluid
    .row
      .col-md-6.col-md-offset-3
        .page-header
          h1 Ajoute un engagement
          if error
            p.alert.alert-danger #{error}
    .row
      .col-md-6.col-md-offset-3
        form(id='creationlongtermform', name='creationlongtermform', action='addlongterm', method='post')
          .form-group.conn-input
            label(for='title') Titre de l'engagement
            input.form-control(id='title', type='text', placeholder='Ex: Mentor de littérature', name='title', required)
          .form-group.conn-input
            label(for='description') Description de l'engagement
            textarea.form-control(id='description', name='description', rows="6" required)
          .form-group.conn-input#address_container
            label(for='address') Adresse
            input.form-control(id='address', type='text', name='address', required)
            p#address_result
          .form-group.conn-input
            label(for='impact') Phrase d'impact
              i.fa.fa-question-circle(data-toggle='tooltip' data-placement='top' title='Phrase courte expliquant l\'impact du bénévolat')
            input.form-control(id='impact', name='impact', placeholder="Aider les enfants en difficulté avec leur réussite scolaire !" maxlength="140", type='text' required)
          .row
            .col-md-6
              .form-group.conn-input
                label(for='expiration_date') Date de fin
                  i.fa.fa-question-circle(data-toggle='tooltip' data-placement='top' title='Date à laquelle l\'engagement ne sera plus visible sur la plateforme')
                input.form-control.datepicker(id='expiration_date', type='text', name='expiration_date' required)
            .col-md-6
              .form-group.conn-input
                label(for='vol_nb') Nombre de bénévoles recherchés
                input.form-control(id='vol_nb', type='number', name='vol_nb' required)
          .form-group.conn-input
            label(for='min_age') Ajouter un âge minimal
            .input-group.conn-input#age_container
              span.input-group-addon
                input#age-checkbox(type='checkbox')
              input.form-control(type='number', id='min_age', name='min_age', placeholder='De nombreux jeunes bénévoles motivés sont sur notre plateforme', disabled=true)
          label(for='slot') Horaires disponibles
          table.table(id='slot')
            thead
              tr
                th #
                th Lundi
                th Mardi
                th Mercredi
                th Jeudi
                th Vendredi
                th Samedi
                th Dimanche
            tbody
              tr
                th(scope='row') AM
                td
                  input(type='checkbox', name='mondayAM')
                td
                  input(type='checkbox', name='tuesdayAM')
                td
                  input(type='checkbox', name='wednesdayAM')
                td
                  input(type='checkbox', name='thursdayAM')
                td
                  input(type='checkbox', name='fridayAM')
                td
                  input(type='checkbox', name='saturdayAM')
                td
                  input(type='checkbox', name='sundayAM')
              tr
                th(scope='row') PM
                td
                  input(type='checkbox', name='mondayPM')
                td
                  input(type='checkbox', name='tuesdayPM')
                td
                  input(type='checkbox', name='wednesdayPM')
                td
                  input(type='checkbox', name='thursdayPM')
                td
                  input(type='checkbox', name='fridayPM')
                td
                  input(type='checkbox', name='saturdayPM')
                td
                  input(type='checkbox', name='sundayPM')
              tr
                th(scope='row')= 'Soir (>15h30)'
                td
                  input(type='checkbox', name='mondayEVE')
                td
                  input(type='checkbox', name='tuesdayEVE')
                td
                  input(type='checkbox', name='wednesdayEVE')
                td
                  input(type='checkbox', name='thursdayEVE')
                td
                  input(type='checkbox', name='fridayEVE')
                td
                  input(type='checkbox', name='saturdayEVE')
                td
                  input(type='checkbox', name='sundayEVE')

          .row
            input.btn.btn-default.form-control(type='submit', form='creationlongtermform', style="margin-bottom: 60px;")



block footscript
  script.
    var input;
    var options = {
      types: ['address'],
      componentRestrictions: {country: 'ca'}
    };

  script.
    function initAutocomplete(){
      input = (document.getElementById('address'));
      console.log(input);
      var autocomplete_is_loading = false;
      var autocomplete = new google.maps.places.Autocomplete(input,options);
      autocomplete.addListener('place_changed', function() {
        autocomplete_is_loading = true;
        console.log('In the place_Changed listener !')
        var place = autocomplete.getPlace();
        console.log('place : ' + JSON.stringify(place));
        if (!place.geometry) {
          $('#address_container').removeClass('has-success');
          $('#address_container').addClass('has-error');
          autocomplete_is_loading = false;
        } else {
          $('#address_container').removeClass('has-error');
          $('#address_container').addClass('has-success');
          autocomplete_is_loading = false;
          testAddress();
        }
      });

      var testAddress = function(){
        var place = autocomplete.getPlace();
        var address_string = $('#address').val();
        console.info('POST to test_address and place : ' + JSON.stringify(place));
        console.info('POST to test_address and address_string : ' + JSON.stringify(address_string));
          $.post('/test_address', {address: address_string}, function(data){
            console.info('POST to test_address sent with datas : ' + JSON.stringify(address_string));
            $('#address_result').removeClass('hidden');
          })
          .done(function(data){
            console.log('There is a place.geometry !' + JSON.stringify(data));
            if (!autocomplete_is_loading){
              $('#address_container').removeClass('has-error');
              $('#address_container').addClass('has-success');
              $('#alert-maps').addClass('hidden');
              $('#address_result').empty();
              $('#address_result').append('Sur la carte, l\'adresse sera : ' + data.string);
            }
          })
          .fail(function(data){
            console.log('NO place or place.geometry !' + JSON.stringify(data));
            if (!autocomplete_is_loading){
              $('#address_container').removeClass('has-success');
              $('#address_container').addClass('has-error');
              $('#address_result').empty();
              $('#alert-maps').removeClass('hidden');
            }
          })
      };

      $('#address').on('focusout', function(){
        console.log('GET OUT !')
        window.setTimeout(testAddress(), 1000);
      });
      $('#address').on('focusin', function(){
        $('#address_result').empty();
      });
    };

    $( document ).ready(function() {
      $(function () {
        $('[data-toggle="tooltip"]').tooltip()
      });
      let event_props = {};
      event_props.type = 'longterm';
      if (env == 'prod') {
        amplitude.getInstance().logEvent('o_visit_addopp', event_props);
        $('#creationlongtermform').submit(function(){
          amplitude.getInstance().logEvent('o_add_opp', event_props);
          amplitude.getInstance().logEvent('g_revenue');
        });
      }
      $('#creationlongtermform').on('keyup keypress', function(e) {
        var keyCode = e.keyCode || e.which;
        if (keyCode === 13) { 
          e.preventDefault();
          return false;
        }
      });


      var input = $('.datepicker');
      input.pickadate({
        firstDay: 1,
        formatSubmit: 'yyyy-mm-dd',
        min: new Date()
      });

      $('#age-checkbox').click(function(){
        if($(this).prop('checked') > 0){
          console.log($(this).prop('checked'));
          console.log('checked !')
          $('#min_age').prop('disabled', false);
        } else {
          console.log($(this).prop('checked'));
          console.log('Not checked!')
          $('#min_age').prop('disabled', true);
        };
      });
    });

  script(src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBRPJIqo9jqMb99E47aKuO64rxugd3S-Wk&signed_in=true&libraries=places&callback=initAutocomplete" async defer)